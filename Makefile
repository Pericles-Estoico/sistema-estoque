# Makefile para Sistema de Fluxo de Estoque

# VariÃ¡veis
PYTHON = python3
PIP = pip3
APP = dashboard_streamlit.py

# Comandos principais
.PHONY: install run clean deploy help

# Instalar dependÃªncias
install:
	@echo "ğŸ“¦ Instalando dependÃªncias..."
	$(PIP) install -r requirements.txt
	@echo "âœ… InstalaÃ§Ã£o concluÃ­da!"

# Executar aplicaÃ§Ã£o
run:
	@echo "ğŸš€ Iniciando dashboard Streamlit..."
	streamlit run $(APP) --server.port 8501 --server.address 0.0.0.0

# Executar em modo desenvolvimento
dev:
	@echo "ğŸ”§ Modo desenvolvimento..."
	streamlit run $(APP) --server.runOnSave true

# Limpar cache e arquivos temporÃ¡rios
clean:
	@echo "ğŸ§¹ Limpando arquivos temporÃ¡rios..."
	rm -rf __pycache__/
	rm -rf .streamlit/
	rm -f *.pyc
	@echo "âœ… Limpeza concluÃ­da!"

# Preparar para deploy no GitHub
deploy:
	@echo "ğŸš€ Preparando deploy..."
	git add .
	git status
	@echo "Execute: git commit -m 'Deploy sistema estoque' && git push"

# Backup do banco de dados
backup:
	@echo "ğŸ’¾ Fazendo backup do banco..."
	cp estoque.db backup_estoque_$(shell date +%Y%m%d_%H%M%S).db
	@echo "âœ… Backup criado!"

# Testar aplicaÃ§Ã£o
test:
	@echo "ğŸ§ª Testando aplicaÃ§Ã£o..."
	$(PYTHON) -c "import streamlit; import pandas; import plotly; print('âœ… Todas as dependÃªncias OK!')"

# Gerar dados de exemplo
sample-data:
	@echo "ğŸ“Š Gerando dados de exemplo..."
	$(PYTHON) -c "from dashboard_streamlit import EstoqueDB; db = EstoqueDB(); print('âœ… Banco inicializado!')"

# Mostrar ajuda
help:
	@echo "ğŸ“‹ Comandos disponÃ­veis:"
	@echo "  make install     - Instalar dependÃªncias"
	@echo "  make run         - Executar aplicaÃ§Ã£o"
	@echo "  make dev         - Modo desenvolvimento"
	@echo "  make clean       - Limpar arquivos temporÃ¡rios"
	@echo "  make deploy      - Preparar para deploy"
	@echo "  make backup      - Backup do banco de dados"
	@echo "  make test        - Testar dependÃªncias"
	@echo "  make sample-data - Gerar dados de exemplo"
	@echo "  make help        - Mostrar esta ajuda"

# Comando padrÃ£o
all: install test run
